@page "/account/password"
@using ProTraxx.Shared.Model;
@inject HttpClient Http
@inject NavigationManager nav

@if (mainLayout.LoggedIn)
{
		<h3 class="my-4">Change Password</h3>

		<form @onsubmit="SubmitForm">
			<div class="mb-3">
				<p>Enter your current password and the new password.</p>
			</div>
			<div class="mb-3">
				<label for="pwd1" class="form-label">Current Password</label>
				<input type="password" class="form-control" id="pwd1" required @bind-value="pwd.CurrentPassword" @onkeypress="() => message = null" />
			</div>
			<div class="mb-3">
				<label for="pwd2" class="form-label">New Password</label>
				<input type="password" class="form-control" id="pwd2" required @bind-value="pwd.NewPassword" @onkeypress="() => message = null" />
			</div>
			<div class="mb-3">
				<label for="pwd3" class="form-label">Confirm New Password</label>
				<input type="password" class="form-control" id="pwd3" required @bind-value="confirmpwd" @onkeypress="() => message = null" />
			</div>
			<button type="submit" class="btn btn-primary" disabled="@disableBtn">Submit</button>
		</form>

		<div class="my-3 alert alert-@alertType @(string.IsNullOrWhiteSpace(message) ? "d-none" : "")" role="alert">@message</div>
}
else
{
		<div class="alert alert-danger" role="alert">Please Login for access...</div>
		<button type="submit" class="btn btn-success" @onclick="mainLayout.OpenLogin">Login</button>
}

@code {
	[CascadingParameter]
	public MainLayout mainLayout { get; set; }

	bool disableBtn;
	private string alertType, message, confirmpwd;

	Password pwd = new Password();

	private async Task<bool> SubmitForm()
	{
		if (pwd.NewPassword.Length < 8)
		{
			alertType = "danger";
			message = "Passwords must be at least 8 characters.";
		}
		else if (pwd.NewPassword != confirmpwd)
		{
			pwd.NewPassword = null;
			confirmpwd = null;
			alertType = "danger";
			message = "Passwords do not match. Please try again.";
		}
		else
		{
			disableBtn = true;
			var requestMsg = new HttpRequestMessage(HttpMethod.Patch, "/api/v1/auth/password");
			requestMsg.Headers.Add("Authorization", "Bearer " + mainLayout.JWT);
			requestMsg.Content = JsonContent.Create(pwd);
			var response = await Http.SendAsync(requestMsg);
			if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized) // NOTE: THEN TOKEN HAS EXPIRED
			{
				await mainLayout.Logout();
				nav.NavigateTo("/account");
			}
			else if (response.IsSuccessStatusCode)
			{
				if (await response.Content.ReadFromJsonAsync<bool>())
				{
					alertType = "success";
					message = "Password successfully changed.";
					pwd.Clear();
					confirmpwd = null;
				}
				else
				{
					alertType = "danger";
					message = "Password not changed. You may have entered an incorrect current password.";
				}
			}
			disableBtn = false;
		}
		return false;
	}

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();

		if (!mainLayout.LoggedIn)
			nav.NavigateTo("/account");
	}

}